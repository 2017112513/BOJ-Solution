from collections import deque 
maps = [[1,0,1,1,1],[1,0,1,0,1],[1,0,1,1,1],[1,1,1,0,1],[0,0,0,0,1]]
def bfs(N,M):
    dx = [1,-1,0,0]
    dy = [0,0,1,-1]
    
    d = deque()
    d.append((0,0,0))
    
    visited =[[0] * M for _ in range(N)]
    visited[0][0] = 1
    
    while d:

        cnt,x,y = d.popleft()
        if [x,y] == [N-1,M-1]:
            print(x,y)
            return cnt
    
        for i in range(4):
            a,b = x+dx[i],y+dy[i]
            if 0<=a<N and 0<=b<M and not visited[a][b] and maps[a][b] == 1:
                visited[a][b] = 1
                d.append((cnt+1,a,b))    
    
    return -1
def solution(maps): # 1은 공간 , 0은 벽 
    
    N , M = len(maps) , len(maps[0])
    
    answer = bfs(N,M)
    
    return answer

ans = solution(maps)
print(ans)